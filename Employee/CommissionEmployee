public class CommissionEmployee extends Employee {
	private double grossSales;
	private double commissionRate;
	
	//constructor
	public CommissionEmployee(String firstName, String lastName, String socialSecurityNumber, double grossSales, double commissionRate) {
		super(firstName, lastName, socialSecurityNumber);
		
		if(grossSales < 0.0) {//validate sales
			throw new IllegalArgumentException("Sales must be >= 0.0");
		}
		if(commissionRate < 0.0 || commissionRate > 1.0) {//validate commission
			throw new IllegalArgumentException("Commission must be >= 0.0");
		}
		this.commissionRate = commissionRate;
		this.grossSales = grossSales;
	}
	//set sales
	public void setGrossSales(double grossSales) {
		if (grossSales<0.0) {
			throw new IllegalArgumentException("Weekly gross sales must be >= 0.0");
		}
		this.grossSales = grossSales;
	}
	//set commission
	public void setCommissionRate(double CommissionRate) {
		if (commissionRate<0.0) {
			throw new IllegalArgumentException("Commission rate must be >= 0.0");
		}
		this.commissionRate = CommissionRate;
		}
	//return sales
	public double getGrossSales() {
		return grossSales;
	}
	//return commission
	public double getCommissionRate() {
		return commissionRate;
	}
//calculate earnings; override abstract method earnings in Employee
@Override
public double earnings() {
	return getGrossSales() * getCommissionRate();
}
//return String representation of CommissionEmployee object
@Override
public String toString() {
	return String.format("Commission employee: %s%n%s: %,.2f; %s: $%,.2f", super.toString(), "Commission rate", getCommissionRate(), "Gross weekly sales", getGrossSales());
}	
}
